/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface StandardCreativeAuctionInterface extends ethers.utils.Interface {
  functions: {
    "createAuction(address,address,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "createBid(uint256,bool)": FunctionFragment;
    "finishAuction(uint256)": FunctionFragment;
    "getAuction(uint256)": FunctionFragment;
    "getAuctionEndTime(uint256)": FunctionFragment;
    "getCurrentLeader(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "switchTopBidToOpenEdition(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createAuction",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createBid",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "finishAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionEndTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentLeader",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "switchTopBidToOpenEdition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "createAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finishAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAuction", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentLeader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "switchTopBidToOpenEdition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "AuctionBid(uint256,bool,uint256,address)": EventFragment;
    "AuctionCreated(uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuctionBid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class StandardCreativeAuction extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: StandardCreativeAuctionInterface;

  functions: {
    createAuction(
      nftContract: string,
      creatorAddress: string,
      creatorShare: BigNumberish,
      openEditionPrice: BigNumberish,
      minBidIncrement: BigNumberish,
      duration: BigNumberish,
      durationIncrement: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createBid(
      auctionId: BigNumberish,
      oneOfOne: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    finishAuction(
      auctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAuction(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          BigNumber,
          boolean
        ] & {
          nftContract: string;
          creatorAddress: string;
          creatorShare: BigNumber;
          openEditionPrice: BigNumber;
          minBidIncrement: BigNumber;
          duration: BigNumber;
          durationIncrement: BigNumber;
          startTime: BigNumber;
          topBidAmount: BigNumber;
          topBidAddress: string;
          totalOpenEditionBids: BigNumber;
          finished: boolean;
        }
      ]
    >;

    getAuctionEndTime(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCurrentLeader(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & {
        winnerIsOneOfOne: boolean;
        topBidAmount: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    switchTopBidToOpenEdition(
      auctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  createAuction(
    nftContract: string,
    creatorAddress: string,
    creatorShare: BigNumberish,
    openEditionPrice: BigNumberish,
    minBidIncrement: BigNumberish,
    duration: BigNumberish,
    durationIncrement: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createBid(
    auctionId: BigNumberish,
    oneOfOne: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  finishAuction(
    auctionId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAuction(
    auctionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      boolean
    ] & {
      nftContract: string;
      creatorAddress: string;
      creatorShare: BigNumber;
      openEditionPrice: BigNumber;
      minBidIncrement: BigNumber;
      duration: BigNumber;
      durationIncrement: BigNumber;
      startTime: BigNumber;
      topBidAmount: BigNumber;
      topBidAddress: string;
      totalOpenEditionBids: BigNumber;
      finished: boolean;
    }
  >;

  getAuctionEndTime(
    auctionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCurrentLeader(
    auctionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber] & {
      winnerIsOneOfOne: boolean;
      topBidAmount: BigNumber;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  switchTopBidToOpenEdition(
    auctionId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createAuction(
      nftContract: string,
      creatorAddress: string,
      creatorShare: BigNumberish,
      openEditionPrice: BigNumberish,
      minBidIncrement: BigNumberish,
      duration: BigNumberish,
      durationIncrement: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createBid(
      auctionId: BigNumberish,
      oneOfOne: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    finishAuction(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAuction(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        boolean
      ] & {
        nftContract: string;
        creatorAddress: string;
        creatorShare: BigNumber;
        openEditionPrice: BigNumber;
        minBidIncrement: BigNumber;
        duration: BigNumber;
        durationIncrement: BigNumber;
        startTime: BigNumber;
        topBidAmount: BigNumber;
        topBidAddress: string;
        totalOpenEditionBids: BigNumber;
        finished: boolean;
      }
    >;

    getAuctionEndTime(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentLeader(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & {
        winnerIsOneOfOne: boolean;
        topBidAmount: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    switchTopBidToOpenEdition(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AuctionBid(
      id?: BigNumberish | null,
      oneOfOne?: null,
      amount?: null,
      bidder?: string | null
    ): TypedEventFilter<
      [BigNumber, boolean, BigNumber, string],
      { id: BigNumber; oneOfOne: boolean; amount: BigNumber; bidder: string }
    >;

    AuctionCreated(
      id?: BigNumberish | null,
      nftContract?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { id: BigNumber; nftContract: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    createAuction(
      nftContract: string,
      creatorAddress: string,
      creatorShare: BigNumberish,
      openEditionPrice: BigNumberish,
      minBidIncrement: BigNumberish,
      duration: BigNumberish,
      durationIncrement: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createBid(
      auctionId: BigNumberish,
      oneOfOne: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    finishAuction(
      auctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAuction(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctionEndTime(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentLeader(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    switchTopBidToOpenEdition(
      auctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createAuction(
      nftContract: string,
      creatorAddress: string,
      creatorShare: BigNumberish,
      openEditionPrice: BigNumberish,
      minBidIncrement: BigNumberish,
      duration: BigNumberish,
      durationIncrement: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createBid(
      auctionId: BigNumberish,
      oneOfOne: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    finishAuction(
      auctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAuction(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuctionEndTime(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentLeader(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    switchTopBidToOpenEdition(
      auctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
